openapi: 3.0.0
info:
  title: Tech Academy API
  version: '1.0.0'
paths:
  /users:
    get:
      summary: Lista todos os usuários
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
    post:
      summary: Cria um novo usuário
      security:
        - bearerAuth: []
      requestBody:
        description: Dados do usuário a ser criado.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Retorna um usuário específico pelo ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID do usuário.
      responses:
        '200':
          description: Usuário encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuário não encontrado.
    put:
      summary: Atualiza os dados de um usuário pelo ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID do usuário a ser atualizado.
      requestBody:
        description: Dados atualizados do usuário.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuário atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuário não encontrado.
    delete:
      summary: Exclui um usuário pelo ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID do usuário a ser removido.
      responses:
        '204':
          description: Usuário excluído com sucesso.
        '404':
          description: Usuário não encontrado.

  /login:
    post:
      summary: Faz login para um novo usuário
      security:
        - bearerAuth: []
      requestBody:
        description: Dados para Login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          description: Usuário logado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'

  /items:
    get:
      summary: Retorna todos os itens
      responses:
        '200':
          description: Lista de itens
        '500':
          description: Erro de servidor
    post:
      summary: Cria um novo item
      requestBody:
        description: Dados do item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item criado com sucesso
        '400':
          description: Comando inválido
        '500':
          description: Erro de servidor

  /items/{id}:
    get:
      summary: Retorna um item pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do item
      responses:
        '200':
          description: Item encontrado
        '404':
          description: Item não encontrado
        '500':
          description: Erro de servidor
    put:
      summary: Atualiza um item pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do item
      requestBody:
        description: Dados do item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item atualizado com sucesso
        '400':
          description: Comando inválido
        '404':
          description: Item não encontrado
        '500':
          description: Erro de servidor
    delete:
      summary: Deleta um item pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do item
      responses:
        '204':
          description: Item deletado com sucesso
        '404':
          description: Item não encontrado
        '500':
          description: Erro de servidor

  /favorites:
    get:
      summary: Retorna todos os favoritos
      responses:
        '200':
          description: Lista de favoritos
        '500':
          description: Erro de servidor
    post:
      summary: Adiciona um novo favorito
      requestBody:
        description: Dados do favorito
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favorite'
      responses:
        '201':
          description: Favorito adicionado com sucesso
        '400':
          description: Comando inválido
        '500':
          description: Erro de servidor

  /favorites/{id}:
    delete:
      summary: Remove um favorito pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do favorito
      responses:
        '204':
          description: Favorito removido com sucesso
        '404':
          description: Favorito não encontrado
        '500':
          description: Erro de servidor

  /categories:
    get:
      summary: Retorna todas as categorias
      responses:
        '200':
          description: Lista de categorias
        '500':
          description: Erro de servidor
    post:
      summary: Cria uma nova categoria
      requestBody:
        description: Dados da categoria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Categoria criada com sucesso
        '400':
          description: Comando inválido
        '500':
          description: Erro de servidor

  /categories/{id}:
    get:
      summary: Retorna uma categoria pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID da categoria
      responses:
        '200':
          description: Categoria encontrada
        '404':
          description: Categoria não encontrada
        '500':
          description: Erro de servidor
    put:
      summary: Atualiza uma categoria pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID da categoria
      requestBody:
        description: Dados da categoria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Categoria atualizada com sucesso
        '400':
          description: Comando inválido
        '404':
          description: Categoria não encontrada
        '500':
          description: Erro de servidor
    delete:
      summary: Deleta uma categoria pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID da categoria
      responses:
        '204':
          description: Categoria deletada com sucesso
        '404':
          description: Categoria não encontrada
        '500':
          description: Erro de servidor

  /authors:
    get:
      summary: Retorna todos os autores
      responses:
        '200':
          description: Lista de autores
        '500':
          description: Erro de servidor
    post:
      summary: Cria um novo autor
      requestBody:
        description: Dados do autor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Autor criado com sucesso
        '400':
          description: Comando inválido
        '500':
          description: Erro de servidor

  /authors/{id}:
    get:
      summary: Retorna um autor pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do autor
      responses:
        '200':
          description: Autor encontrado
        '404':
          description: Autor não encontrado
        '500':
          description: Erro de servidor
    put:
      summary: Atualiza um autor pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do autor
      requestBody:
        description: Dados do autor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Autor atualizado com sucesso
        '400':
          description: Comando inválido
        '404':
          description: Autor não encontrado
        '500':
          description: Erro de servidor
    delete:
      summary: Deleta um autor pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do autor
      responses:
        '204':
          description: Autor deletado com sucesso
        '404':
          description: Autor não encontrado
        '500':
          description: Erro de servidor

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "João"
        cpf:
          type: string
          example: "123.456.789-00"
        email:
          type: string
          example: "email@exemplo.com"
        password:
          type: string
          example: "senha123"
        admin:
          type: boolean
          example: false
    UserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Login:
      type: object
      properties:
        email:
          type: string
          example: "email@exemplo.com"
        password:
          type: string
          example: "senha123"
    LoginList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/Login'
    Item:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Item 1"
        description:
          type: string
          example: "Descrição do item"
        price:
          type: number
          example: 100.0
    Favorite:
      type: object
      properties:
        id:
          type: string
          example: "1"
        userId:
          type: string
          example: "1"
        itemId:
          type: string
          example: "1"
    Category:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Categoria 1"
    Author:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Autor 1"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT